@startuml



    
namespace comp #DDDDDD{
UnitComp --> abilities.Ability
abstract UnitComp {
- controller : UnitController
+ type : UnitType
+ spawnedByCore : boolean
+ flag : double
+ abilities : Seq<Ability>
- resupplyTime : float
- wasPlayer : boolean
---
+ moveAt(vector : Vec2) : void
+ approach(vector : Vec2) : void
+ aimLock(pos : Position) : void
+ aimLock(x : float, y : float) : void
+ hasWeapons() : boolean
+ speed() : float
+ realSpeed() : float
+ eachGroup(cons : Cons<Unit>) : void
+ prefRotation() : float 
+ range() : float
+ clipSize() : float 
+ sense(sensor : LAccess) : double 
+ senseObject(sensor : LAccess) : Object
+ sense(content : Content) : double
+ canDrown() : boolean
+ update() : void
}
}

namespace abilities #DDDDDD{
EnergyFieldAbility --|> Ability
MoveLightingAbility --|> Ability
ForceFieldAbility --|> Ability
ForceFieldAbility x-> ForceFieldAbility : -paramField

abstract Ability {
+ update(unit : Unit) : void
+ draw(unit : Unit) : void
+ death(unit : Unit) : void
+ copy() : Ability
+ displayBars(unit : Unit, bars : Table) : void
+ localized() : String
}

class EnergyFieldAbility{
- {static} all : Seq<Healthc> = new Seq<>()
+ damage : float
+ reload : float 
+ range : float
+ healEffect : Effect
+ hitEffect : Effect 
+ damageEffect : Effect 
+ status : StatusEffect 
+ shootSound : Sound 
+ statusDuration : float
---
+ EnergyFieldAbility()
+ EnergyFieldAbility(damage : float, reload : float, range : float)
+ localized() : String
+ draw(unit : Unit) : void
+ update(unit : Unit) : void
}

class ForceFieldAbility{
+ radius : float
+ regen : float 
+ max : float
+ cooldown : float
-{static} realRed : float
-{static} paramUnit : Unit
---
- {static} paramField : ForceFieldAbility
+ ForceFieldAbility(radius : float, regen : float, max : float, cooldown : float)
+ ForceFieldAbility()
+ update(unit : Unit) : void
+ draw(unit : Unit) : void
+ displayBars(unit : Unit, bars : Table) : void
+ checkRadius(unit : Unit) : void



}

class MoveLightingAbility{
+ damage : float
+ chance : float
+ length : int 
+ minSpeed : float
+ maxSpeed : float
+ color : Color
+ offset : float
+ width : float
+ alternate : boolean
+ healRegion : String
+ bullet : BulletType
+ bulletAngle : float
+ bulletSpread : float
+ shootEffect : Effect 
+ parentizeEffects : boolean
+ shootSound : Sound
---
+ MoveLightingAbility()
+ MoveLightingAbility(damage : float, length : int, chance : float, offset : float, minSpeed : float, maxSpeed : float, color : Color, heatRegion : String)
+ MoveLightingAbility(damage : float, length : int, chance : float, offset : float, minSpeed : float, maxSpeed : float, color : Color)
+ update(unit : Unit) : void
+ draw(unit : Unit) : void

}

}




@enduml

